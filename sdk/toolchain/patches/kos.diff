diff -ruN kos_orig/environ_base.sh kos/environ_base.sh
--- kos_orig/environ_base.sh	2015-06-17 18:26:59.000000000 +0300
+++ kos/environ_base.sh	2015-06-17 18:16:01.000000000 +0300
@@ -42,7 +42,7 @@
 export KOS_GCCVER="`kos-cc -v 2>&1 | tail -1 | awk '{print $3}'`"
 
 case $KOS_GCCVER in
-  4*)
+  4*|5*)
     export KOS_LDFLAGS="${KOS_LDFLAGS} ${KOS_LD_SCRIPT} -nodefaultlibs ${KOS_LIB_PATHS}" ;;
   *)
     export KOS_LDFLAGS="${KOS_LDFLAGS} -nostartfiles -nostdlib ${KOS_LIB_PATHS}" ;;
@@ -52,7 +52,7 @@
 export KOS_ARCH_DIR="${KOS_BASE}/kernel/arch/${KOS_ARCH}"
 
 case $KOS_GCCVER in
-  4*)
+  4*|5*)
     export KOS_START="" ;;
   *)
     export KOS_START="${KOS_ARCH_DIR}/kernel/startup.o" ;;
diff -ruN kos_orig/include/assert.h kos/include/assert.h
--- kos_orig/include/assert.h	2015-06-17 18:26:59.000000000 +0300
+++ kos/include/assert.h	2015-06-16 16:27:26.000000000 +0300
@@ -42,7 +42,7 @@
     \param  e               A value or expression to be evaluated as true or
                             false.
 */
-#   define assert(e)        ((e) ? (void)0 : __assert(__FILE__, __LINE__, #e, NULL, __FUNCTION__))
+#   define assert(e)        ((e) ? (void)0 : __assert(__FILE__, __LINE__, #e, NULL, __func__))
 
 /** \brief  assert() with a custom message.
 
@@ -53,7 +53,7 @@
                             false.
     \param  m               A message (const char *).
 */
-#   define assert_msg(e, m) ((e) ? (void)0 : __assert(__FILE__, __LINE__, #e, m, __FUNCTION__))
+#   define assert_msg(e, m) ((e) ? (void)0 : __assert(__FILE__, __LINE__, #e, m, __func__))
 #endif
 
 /* \cond */
diff -ruN kos_orig/include/kos/cdefs.h kos/include/kos/cdefs.h
--- kos_orig/include/kos/cdefs.h	2015-06-17 18:26:59.000000000 +0300
+++ kos/include/kos/cdefs.h	2015-02-13 13:08:57.000000000 +0200
@@ -1,80 +1,18 @@
 /* KallistiOS ##version##
-
-   kos/cdefs.h
-   Copyright (C)2002,2004 Dan Potter
-
-   Based loosely around some stuff in BSD's sys/cdefs.h
+kos/cdefs.h
+Copyright (C)2002,2004 Dan Potter
+Based loosely around some stuff in BSD's sys/cdefs.h
 */
-
-/** \file   kos/cdefs.h
-    \brief  Potentially useful definitions for C Programs.
-
-    This file contains definitions of various __attribute__ directives in
-    shorter forms for use in programs (to aid in optimization, mainly).
-
-    \author Dan Potter
+/** \file kos/cdefs.h
+\brief Potentially useful definitions for C Programs.
+This file contains definitions of various __attribute__ directives in
+shorter forms for use in programs (to aid in optimization, mainly).
+\author Dan Potter
 */
-
 #ifndef __KOS_CDEFS_H
 #define __KOS_CDEFS_H
-
 #include <sys/cdefs.h>
 
-/* Check GCC version */
-#ifndef _arch_ps2
-#   if __GNUC__ < 2
-#       warning Your GCC is too old. This will probably not work right.
-#   endif
-
-#   if __GNUC__ == 2 && __GNUC_MINOR__ < 97
-#       warning Your GCC is too old. This will probably not work right.
-#   endif
-#endif  /* _arch_ps2 */
-
-/* Special function/variable attributes */
-
-/** \brief  Identify a function that will never return. */
-#define __noreturn  __attribute__((__noreturn__))
-
-/** \brief  Identify a function that has no side effects other than its return,
-            and only uses its arguments for any work. */
-#define __pure      __attribute__((__const__))
-
-/** \brief  Identify a function or variable that may be unused. */
-#define __unused    __attribute__((__unused__))
-
-/** \brief  Alias for \ref __noreturn. For BSD compatibility. */
-#define __dead2     __noreturn  /* BSD compat */
-
-/** \brief  Alias for \ref __pure. Fore BSD compatibility. */
-#define __pure2     __pure      /* ditto */
-
-/* Printf/Scanf-like declaration */
-/** \brief  Identify a function as accepting formatting like printf().
-
-    Using this macro allows GCC to typecheck calls to printf-like functions,
-    which can aid in finding mistakes.
-
-    \param  fmtarg          The argument number (1-based) of the format string.
-    \param  firstvararg     The argument number of the first vararg (the ...).
-*/
-#define __printflike(fmtarg, firstvararg) \
-    __attribute__((__format__ (__printf__, fmtarg, firstvararg)))
-
-/** \brief  Identify a function as accepting formatting like scanf().
-
-    Using this macro allows GCC to typecheck calls to scanf-like functions,
-    which can aid in finding mistakes.
-
-    \param  fmtarg          The argument number (1-based) of the format string.
-    \param  firstvararg     The argument number of the first vararg (the ...).
-*/
-#define __scanflike(fmtarg, firstvararg) \
-    __attribute__((__format__ (__scanf__, fmtarg, firstvararg)))
-
-/* GCC macros for special cases */
-/* #if __GNUC__ ==  */
-
-#endif  /* __KOS_CDEFS_H */
-
+#define __noreturn __attribute__((__noreturn__))
 
+#endif /* __KOS_CDEFS_H */ 
\ No newline at end of file
